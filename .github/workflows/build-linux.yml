name: Build Linux (Debian/Ubuntu)

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/build-linux.yml'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-linux:
    name: Build for Debian/Ubuntu
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version and date
        id: metadata
        run: |
          VERSION=$(grep "^version" Cargo.toml | head -1 | cut -d'"' -f2)
          DATE=$(date +'%Y%m%d')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "date=$DATE" >> $GITHUB_OUTPUT
          echo "Version: $VERSION, Date: $DATE"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libssl-dev \
            pkg-config \
            libgtk-3-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            libspeechd-dev \
            libxkbcommon-dev \
            libfontconfig1-dev \
            libatk1.0-dev \
            libgdk-pixbuf2.0-dev

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: |
          echo "Building for Debian/Ubuntu Linux x86_64"
          echo "Rust version: $(rustc --version)"
          cargo build --release --verbose
          echo "Build completed successfully"

      - name: Prepare release
        id: prepare
        run: |
          VERSION="${{ steps.metadata.outputs.version }}"
          DATE="${{ steps.metadata.outputs.date }}"
          ARCHIVE_NAME="rust-r2_v${VERSION}_${DATE}_Linux-Debian-x64.tar.gz"
          
          mkdir -p release
          cp target/release/rust-r2-cli release/
          cp target/release/rust-r2-gui release/
          cp README.md LICENSE release/
          
          tar czf "${ARCHIVE_NAME}" -C release .
          
          echo "archive_name=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT
          echo "Created archive: ${ARCHIVE_NAME}"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.metadata.outputs.version }}-${{ steps.metadata.outputs.date }}-Linux-Debian
          name: Linux Debian/Ubuntu - v${{ steps.metadata.outputs.version }} (Build ${{ steps.metadata.outputs.date }})
          body: |
            ## Linux Debian/Ubuntu Build
            
            **Version:** ${{ steps.metadata.outputs.version }}
            **Build Date:** ${{ steps.metadata.outputs.date }}
            **Architecture:** x86_64
            **Compatible with:** Ubuntu 20.04+, Debian 10+
            
            ### Installation
            ```bash
            tar -xzf ${{ steps.prepare.outputs.archive_name }}
            chmod +x rust-r2-*
            ./rust-r2-gui  # For GUI
            ./rust-r2-cli  # For CLI
            ```
            
            ### Dependencies
            Requires GTK3 and standard system libraries. Install with:
            ```bash
            sudo apt-get update
            sudo apt-get install libgtk-3-0 libssl1.1
            ```
          files: ${{ steps.prepare.outputs.archive_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}