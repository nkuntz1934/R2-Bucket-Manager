name: Release Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force a release even without code changes'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  # Check if there are actual code changes
  check-changes:
    name: Check for Code Changes
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.filter.outputs.src }}
      version: ${{ steps.version.outputs.version }}
      date: ${{ steps.date.outputs.date }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for source changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            src:
              - 'src/**'
              - 'Cargo.toml'
              - 'Cargo.lock'

      - name: Extract version from Cargo.toml
        id: version
        run: |
          VERSION=$(grep "^version" Cargo.toml | head -1 | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Get date
        id: date
        run: |
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Decision
        run: |
          if [ "${{ steps.filter.outputs.src }}" == "true" ] || [ "${{ github.event.inputs.force_release }}" == "true" ]; then
            echo "✅ Changes detected or force release requested - proceeding with build"
          else
            echo "⏭️ No code changes detected - skipping release"
          fi

  # Lint the code
  lint:
    name: Lint & Format Check
    needs: check-changes
    if: needs.check-changes.outputs.has_changes == 'true' || github.event.inputs.force_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

  # Build all platforms
  build:
    name: Build - ${{ matrix.job.target }}
    needs: [check-changes, lint]
    if: needs.check-changes.outputs.has_changes == 'true' || github.event.inputs.force_release == 'true'
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: x86_64-apple-darwin,      os: macos-latest,  name: macOS-Intel }
          - { target: aarch64-apple-darwin,     os: macos-latest,  name: macOS-ARM }
          - { target: x86_64-pc-windows-msvc,   os: windows-latest, name: Windows-x64 }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-20.04,  name: Linux-x64 }

    runs-on: ${{ matrix.job.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: matrix.job.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libspeechd-dev libxkbcommon-dev libfontconfig1-dev libatk1.0-dev libgdk-pixbuf2-dev

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.job.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.job.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release --target ${{ matrix.job.target }}

      - name: Package (Windows)
        if: matrix.job.os == 'windows-latest'
        run: |
          $VERSION = "${{ needs.check-changes.outputs.version }}"
          $DATE = "${{ needs.check-changes.outputs.date }}"
          $NAME = "rust-r2_v${VERSION}_${DATE}_${{ matrix.job.name }}"
          
          mkdir release
          copy target\${{ matrix.job.target }}\release\rust-r2-cli.exe release\
          copy target\${{ matrix.job.target }}\release\rust-r2-gui.exe release\
          copy README.md release\
          copy LICENSE release\
          
          Compress-Archive -Path release\* -DestinationPath "${NAME}.zip"
          echo "ASSET_PATH=${NAME}.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "ASSET_NAME=${NAME}.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Package (Unix)
        if: matrix.job.os != 'windows-latest'
        run: |
          VERSION="${{ needs.check-changes.outputs.version }}"
          DATE="${{ needs.check-changes.outputs.date }}"
          NAME="rust-r2_v${VERSION}_${DATE}_${{ matrix.job.name }}"
          
          mkdir -p release
          cp target/${{ matrix.job.target }}/release/rust-r2-cli release/ 2>/dev/null || true
          cp target/${{ matrix.job.target }}/release/rust-r2-gui release/ 2>/dev/null || true
          cp README.md LICENSE release/
          
          tar czf "${NAME}.tar.gz" -C release .
          echo "ASSET_PATH=${NAME}.tar.gz" >> $GITHUB_ENV
          echo "ASSET_NAME=${NAME}.tar.gz" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.job.name }}
          path: ${{ env.ASSET_PATH }}

  # Create GitHub Release
  create-release:
    name: Create Release
    needs: [check-changes, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.check-changes.outputs.version }}"
          DATE="${{ needs.check-changes.outputs.date }}"
          
          echo "# Release v${VERSION} (Build ${DATE})" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## 📦 Downloads" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "| Platform | Architecture | Download |" >> RELEASE_NOTES.md
          echo "|----------|--------------|----------|" >> RELEASE_NOTES.md
          echo "| Windows | x64 | [rust-r2_v${VERSION}_${DATE}_Windows-x64.zip](https://github.com/${{ github.repository }}/releases/download/v${VERSION}-${DATE}/rust-r2_v${VERSION}_${DATE}_Windows-x64.zip) |" >> RELEASE_NOTES.md
          echo "| macOS | Intel | [rust-r2_v${VERSION}_${DATE}_macOS-Intel.tar.gz](https://github.com/${{ github.repository }}/releases/download/v${VERSION}-${DATE}/rust-r2_v${VERSION}_${DATE}_macOS-Intel.tar.gz) |" >> RELEASE_NOTES.md
          echo "| macOS | Apple Silicon | [rust-r2_v${VERSION}_${DATE}_macOS-ARM.tar.gz](https://github.com/${{ github.repository }}/releases/download/v${VERSION}-${DATE}/rust-r2_v${VERSION}_${DATE}_macOS-ARM.tar.gz) |" >> RELEASE_NOTES.md
          echo "| Linux | x64 | [rust-r2_v${VERSION}_${DATE}_Linux-x64.tar.gz](https://github.com/${{ github.repository }}/releases/download/v${VERSION}-${DATE}/rust-r2_v${VERSION}_${DATE}_Linux-x64.tar.gz) |" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## 🔄 Changes" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # Get commit messages since last tag
          if git describe --tags --abbrev=0 2>/dev/null; then
            LAST_TAG=$(git describe --tags --abbrev=0)
            git log ${LAST_TAG}..HEAD --pretty=format:"- %s" >> RELEASE_NOTES.md
          else
            git log -10 --pretty=format:"- %s" >> RELEASE_NOTES.md
          fi
          
          echo "" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## 📝 Checksums" >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec sha256sum {} \; | sed 's|artifacts/[^/]*/||' >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-changes.outputs.version }}-${{ needs.check-changes.outputs.date }}
          name: v${{ needs.check-changes.outputs.version }} (Build ${{ needs.check-changes.outputs.date }})
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}